/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0;overflow-y:scroll}h1{font-size:2em;margin:.67em 0}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}body{font-family:Helvetica,Arial,sans-serif;font-size:10px;font-size:.625rem;line-height:1.2;text-transform:uppercase;color:#000}ul{margin:0;padding:0;list-style:none}p{margin:1.5em 0}a{text-decoration:none;color:#000}button{border:0;padding:0;background-color:transparent;cursor:pointer}a:active,a:focus,a:hover,button:active,button:focus,button:hover{font-weight:700}img,video{max-width:100%;height:auto}.post{margin-bottom:4em}.post img{display:block}.post:last-child{margin-bottom:0}.details span{display:block}[id=aside] .details{font-weight:700}.sr-only{position:absolute;border:0;padding:0;width:1px;height:1px;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;white-space:nowrap}body{background-color:#fff}@media (max-width:49.99em){body{padding:7em 0 2em}}@media (min-width:50em){body{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding-top:2.5em 0 10em}}@media (min-width:80em){body{margin-right:auto;margin-left:auto;width:1280px}}@media (min-width:50em){[id=main]{margin-top:159px;padding-left:30px;-webkit-box-flex:1;-ms-flex:1;flex:1}}.container-paginate{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:15px 0}@media (max-width:49.99em){.container-paginate{padding:15px}}.container-paginate li.page-item{padding-left:1em}ul.pagination.flex-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:0}li.page-item{font-weight:700}li.page-item .page-link{font-weight:400}li.page-item a.is-active,li.page-item a:active,li.page-item a:focus,li.page-item a:hover{font-weight:700}.hidden{display:none}.hidden,.visibility-none{visibility:hidden}@media (max-width:49.99em){[id=aside]{padding:0 15px}[id=aside]>.inner-wrapper{text-align:right}}@media (min-width:50em){[id=aside]{padding-right:15px;padding-left:30px;width:305px;-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}[id=aside]>.inner-wrapper{position:-webkit-sticky;position:sticky;z-index:2;top:0;padding-top:2.5em;background-color:#fff}}[id=menu]{line-height:2}[id=menu] span,[id=menu] strong{display:block}[id=menu] .active{font-weight:700}nav{margin-bottom:20px;margin-bottom:1.25rem;background-color:#fff}nav .is-active{font-weight:700}@media (max-width:49.99em){nav{position:fixed;z-index:2;top:0;right:0;left:0;text-align:right}nav ul{display:inline-block;margin:2em 15px 2em 0;width:139px;text-align:left}}.swiper-container{position:relative;overflow:hidden;display:inline-block;margin-bottom:1em;width:140px;text-align:left;line-height:1.2}.swiper-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-transition:none;transition:none}[class^=swiper-button]{position:absolute;top:0;z-index:1}[class^=swiper-button]:before{display:inline;font-weight:700;speak:none}.swiper-button-prev{left:5px}.swiper-button-prev:before{content:"<"}.swiper-button-next{right:5px}.swiper-button-next:before{content:">"}.swiper-slide{-ms-flex-negative:0;flex-shrink:0}.swiper-slide .month{position:relative;margin:0 15px;text-align:center}.swiper-calendar{width:100%;text-align:center;color:#888}.swiper-calendar a{font-weight:700;color:#000}@media (max-width:49.99em){[class^=diary] .caption{margin-left:15px;margin-right:15px}.diary-page .details{margin-left:15px}}@media (max-width:49.99em){[class^=diary] .date{margin:1em 15px 0;text-align:right}.diary-list .post{margin-bottom:2em}.diary-page .details{margin-bottom:1em}}@media (min-width:50em){[class^=diary] .post{position:relative}[class^=diary] .date{position:absolute;top:0;bottom:0;left:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-left:30px;width:305px}.diary-page .details{margin-bottom:2em}}[id=exhibitions-list] a{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex}[id=exhibitions-list] a .title{-webkit-box-flex:1;-ms-flex:1;flex:1}[id=exhibitions-list] a .month{width:114px}[id=exhibitions-list] a .year{width:25px;text-align:right}.is-image{position:relative}.is-image>span{position:absolute;top:0;right:0;bottom:0;left:0;padding:20px}.container{display:-webkit-box;display:-ms-flexbox;display:flex}.container.is-text{padding:20px}.container[data-alignment^=up_]{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.container[data-alignment^=middle_]{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.container[data-alignment^=down_]{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.container[data-alignment$=_middle]{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.container[data-alignment$=_right]{-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}.container[data-color="#FFFFFF"]{color:#fff}.container[data-background="#000000"]{background-color:#000}.container[data-fontsize="12"]{font-size:1.2em}.container[data-fontsize="14"]{font-size:1.4em}.container[data-fontsize="16"]{font-size:1.6em}.container[data-fontsize="18"]{font-size:1.8em}.container[data-fontsize="20"]{font-size:2em}.container[data-fontsize="22"]{font-size:2.2em}.container[data-fontsize="24"]{font-size:2.4em}.container[data-fontweight=lighter]{font-weight:lighter}.container[data-fontweight=bold]{font-weight:700}@media (max-width:49.99em){.video-player button,.video-player span,[id=audio-player] button,[id=audio-player] span{margin-left:15px}}.video-player button,[id=audio-player] button{text-transform:uppercase}.video-player span,[id=audio-player] span{display:block}[id=audio-player]{margin-top:2em}.video-player video{margin-top:1em}@media (max-width:49.99em){[id=aside] .caption,[id=aside] .details,[id=aside] [id=exhibitions-list]{text-align:left}[id=aside] .details{margin-bottom:2em}[id=aside] .details.live{display:none}[id=aside] .caption{margin-bottom:4em}[id=audio-player]{margin-bottom:4em;text-align:left}.caption+[id=audio-player]{margin-top:-2em}[id=covers-list]{margin-top:2em;position:relative}[id=covers-list] img{position:absolute;top:0;left:0}.video-player video{width:100%;height:auto}}@media (min-width:50em){[id=aside] .details{min-height:88px}[id=aside] .is-active{font-weight:700}[id=covers-list] img{display:none}[id=covers-list] img:first-child{display:block}}@media (min-width:80em){.video-player button,.video-player span{margin-left:0}}/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
